<!-- Description de la page: Bouton pour afficher/masquer le formulaire d'ajout de rapport -->
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <button type="button" class="btn btn-primary" id="showReportForm"
                style="width: fit-content; color: white; background-color: gray;">
                Ajouter un rapport</button>
        </div>
    </div>
</div>

<!-- Description: Page pour ajouter un rapport d'avancement -->
<div class="container">
    <form id="progressReportForm" style="display: none;">
        <div class="form-group">
            <label for="progressReportName">Nom du rapport: <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="progressReportName" required>
        </div>
        <div style="margin-top: 5px;"></div>

        <div class="form-group">
            <label for="progressReportType">Type de rapport: <span style="color: red;">*</span></label>
            <select class="form-control" id="progressReportType" required>
                <option value="">Sélectionner le type de rapport</option>
            </select>
        </div>
        <div style="margin-top: 5px;"></div>

        <div class="form-group">
            <label for="progressReportContent">Ajouter des commentaires: <span style="color: red;">*</span></label>
            <textarea class="form-control" id="progressReportContent" rows="4" required></textarea>
        </div>
        <div style="margin-top: 5px;"></div>

        <div class="form-group">
            <label for="progressReportFiles">Saisir tous les noms des fichiers à joindre au rapport: <span
                    style="color: red;">*</span></label>
            <textarea type="text" class="form-control" id="progressReportFiles" rows="6" required></textarea>
        </div>
        <div style="margin-top: 10px;"></div>

        <button type="submit" class="btn btn-primary" id="submitProgressReport"
            style="width: fit-content; color: white;">Soumettre le rapport</button>
    </form>
</div>


<!-- Script pour ajouter un rapport -->

<script>
    // Récupérer les rapports
    document.addEventListener('DOMContentLoaded', function (e) {
        e.preventDefault();
        getReportsTypes();
    });

    // Ajouter un événement pour afficher/masquer le formulaire d'ajout de rapport
    document.getElementById('showReportForm').addEventListener('click', function () {
        if (document.getElementById('progressReportForm').style.display === 'none') {
            document.getElementById('progressReportForm').style.display = 'block';
            document.getElementById('showReportForm').innerText = 'Annuler';
            // Vider les champs du formulaire
            document.getElementById('progressReportName').value = '';
            document.getElementById('progressReportType').value = '';
            document.getElementById('progressReportContent').value = '';
            document.getElementById('progressReportFiles').value = '';
        } else {
            document.getElementById('progressReportForm').style.display = 'none';
            document.getElementById('showReportForm').innerText = 'Ajouter un rapport';
        }
    });

    // Ajouter un événement pour soumettre le rapport
    document.getElementById('submitProgressReport').addEventListener('click', function (e) {
        e.preventDefault();
        submitReport();
    });

    //#region Fonction pour vérifier si le rapport fait déjà partie du projet
    function checkIfReportExists(project_id, reportName) {
        var all_reports_ids = [];
        // Récupérer la table de travail (working_table) correspondante au projet
        fetch('https://lab.padem.org/wp-json/mo/v1/getWorkingTable',
            {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                // Récupérer l'ID du projet
                data.forEach(working_table => {
                    // Vérifier si le rapport fait partie du projet (dans la table de travail)
                    if (parseInt(working_table.project_id) === project_id) {
                        all_reports_ids.push(working_table.report_id);
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Récupérer les rapports (https://lab.padem.org/wp-json/mo/v1/getReports)
        fetch('https://lab.padem.org/wp-json/mo/v1/getReports',
            {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                // Récupérer l'ID du projet
                data.forEach(report => {
                    // Afficher les rapports qui font partie du projet
                    if (all_reports_ids.includes(report.report_id)) {
                        if (report.rapports_avancement !== null) {
                            var _report = JSON.parse(report.rapports_avancement);
                            if (_report.rapport_name === reportName) {
                                return true;
                            }
                        }
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
        return false;
    }
    //#endregion

    //#region Fonction pour récupérer les types de rapports(https://lab.padem.org/wp-json/mo/v1/getReportTypes)
    function getReportsTypes() {
        fetch('https://lab.padem.org/wp-json/mo/v1/getReportTypes',
            {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                // Vérifier si le type de rapport est valide
                if (data.length > 0) {
                    data.forEach(report_type => {
                        if ((report_type.report_type_name !== null) && (report_type.report_type_name !== '') && (report_type.report_type_name === undefined)) {
                            var option = document.createElement('option');
                            option.value = report_type.report_type_name;
                            option.text = report_type.report_type_name;
                            document.getElementById('progressReportType').appendChild(option);
                        }
                    });
                } else {
                    var option = document.createElement('option');
                    option.value = 'Aucun type de rapport trouvé';
                    option.text = 'Aucun type de rapport trouvé';
                    document.getElementById('progressReportType').appendChild(option);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    //#endregion

    //#region Fonction pour soumettre le rapport
    function submitReport() {

        var reportName = document.getElementById('progressReportName').value;
        var reportType = document.getElementById('progressReportType').value;
        var reportContent = document.getElementById('progressReportContent').value;
        var reportFiles = document.getElementById('progressReportFiles').value;
        var project_id = parseInt(new URLSearchParams(window.location.search).get('projectId'));

        if (reportName === '' || reportType === '' || reportContent === '' || reportFiles === '') {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Veuillez remplir tous les champs'
            });
            return;
        }

        var data = {
            'project_id': project_id,
            'rapport_name': reportName,
            'rapport_type': reportType,
            'rapport_content': reportContent,
            'rapport_files': reportFiles,
            'created_date': new Date().toLocaleString(),
        };

        // Vérifier si le rapport fait déjà partie du projet
        if (checkIfReportExists(project_id, reportName)) {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Le rapport existe déjà dans le projet sélectionné'
            });
            return;
        }

        // Soumettre le rapport (créer un rapport)
        fetch('https://lab.padem.org/wp-json/mo/v1/createReport', {
            method: 'POST',
            body: JSON.stringify(data),
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });

        
        var report_id = 0; // ID du rapport
        
        // Récupérer l'ID du rapport
        fetch('https://lab.padem.org/wp-json/mo/v1/getReports', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                data.forEach(report => {
                    // Vérifier si le rapport fait partie du projet
                    if (report.report_id !== null && report.project_id === project_id) {
                        var _report = JSON.parse(report.report_id);
                        if (_report.rapport_name === reportName) {
                            report_id = _report.report_id;
                        }
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });

        
        var current_WorkingTable = {};

        // Récupérer la Working Table corespendante au projet (https://lab.padem.org/wp-json/mo/v1/getWorkingTable)
        fetch('https://lab.padem.org/wp-json/mo/v1/createWorkingTable', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                // Récupérer l'ID du projet
                data.forEach(working_table => {
                    if (parseInt(working_table.project_id) === project_id) {
                        current_WorkingTable = {
                            'Working_Table_Id': working_table.Working_Table_Id,
                            'project_id': working_table.project_id,
                            'report_id': (JSON.parse(working_table.report_id)).push(report_id), // Ajouter l'ID du rapport à la liste des rapports
                            'users_emails_list': working_table.users_emails_list,
                        };
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Supprimer l'ancienne Working Table (https://lab.padem.org/wp-json/mo/v1/removeWorkingTable)
        fetch('https://lab.padem.org/wp-json/mo/v1/removeWorkingTable', {
            method: 'DELETE',
            body: JSON.stringify({ 'column_param1': project_id }), // Supprimer la Working Table correspondante au projet
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Ajouter l'id du rapport à la table de travail(working_table)
        fetch('https://lab.padem.org/wp-json/mo/v1/addToWorkingTable', {
            method: 'POST',
            body: JSON.stringify(current_WorkingTable),
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    //#endregion

    // Fonction pour switcher les images des boutons
    function switchFormsIcons(id) {
        var element = document.getElementById(id);
        if (element.src.match("https://lab.padem.org/wp-content/uploads/plus.png")) {
            element.src = "https://lab.padem.org/wp-content/uploads/voire.png";
        } else if (element.src.match("https://lab.padem.org/wp-content/uploads/voire.png")) {
            element.src = "https://lab.padem.org/wp-content/uploads/masquer.png";
        } else {
            element.src = "https://lab.padem.org/wp-content/uploads/voire.png";
        }
    }

    // Fonction pour switcher les images du bouton Ajouter un projet
    function switchAddProjectButtonIcon() {
        var element = document.getElementById("add-file");
        if (element.src.match("https://lab.padem.org/wp-content/uploads/plus.png") && document.getElementById('projectForm_').style.display === 'none') {
            element.src = "https://lab.padem.org/wp-content/uploads/voire.png";
            element.title = "Afficher le formulaire";
            document.getElementById('projectForm_').style.display = 'block';
        } else if ((document.getElementById("cancelProjectButton").style.display === "block") && (element.src.match("https://lab.padem.org/wp-content/uploads/masquer.png"))) {
            element.src = "https://lab.padem.org/wp-content/uploads/voire.png";
            element.title = "Masquer le formulaire";
            document.getElementById('projectForm_').style.display = 'block';
        } else {
            element.src = "https://lab.padem.org/wp-content/uploads/masquer.png";
            element.title = "Afficher le formulaire";
            document.getElementById('projectForm_').style.display = 'none';
        }
    }
</script>


<!-- End of reports/add_report.htm -->